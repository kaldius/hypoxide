[package]
name = "hypoxide"
version = "0.1.0"
edition = "2024"

[package.metadata.bootimage]
# bootimage will append this to the QEMU launch command for test executables
test-args = [
  # isa-debug-exit: special QEMU device which provides an easy way to exit from the guest system (uses port-mapped I/O)
  # iobase: port address the device should live on
  # iosize: port size (size of data to write to the port at one time) in bytes
  "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04",
  # tell qemu to redirect serial output to stdio
  "-serial", "stdio",
  # tell qemu not to show up
  "-display", "none"
]
test-success-exit-code = 33 # (0x10 << 1) | 1

[dependencies]
# for now, we simply import a bootloader crate instead of creating it ourselves
# the "map_physical_memory" feature maps the complete physical memory somewhere into the virtual address space
# alternatively, we could use the "recursive_page_table" feature
bootloader = { version = "0.9", features = ["map_physical_memory"] }
# The compiler might optimise away memory writes if it is never read. This crate marks memory
# as [volatile](https://en.wikipedia.org/wiki/Volatile_%28computer_programming%29) to prevent this.
volatile = "0.2.6"
spin = "0.5.2" # spinlock because mutexes are not available
x86_64 = "0.14.2" # an abstraction over a set of assembly instructions
uart_16550 = "0.2.0" # used to send data through a serial port to qemu
pic8259 = "0.10.1" # used to configure the Intel 8259 Programmable Interrupt Controller (PIC)
pc-keyboard = "0.7.0" # used to map keyboard scancodes to keys

# allows static variables lazily initialised at runtime
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"] # because we don't link std library

[lib]
path = "src/lib/mod.rs"

[[test]]
name = "should_panic"
harness = false

[[test]]
name = "stack_overflow"
harness = false
